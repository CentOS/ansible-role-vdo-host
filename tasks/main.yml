---
# Defaults tasks for role vdo-host

- name: Importing specific distro variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
  tags:
    - vars

- name: Install the VDO packages
  ansible.builtin.dnf:
    name: "{{ vdo_pkgs_list }}"
    state: installed


# "lvcreate --type vdo" creates two LVs. Thus, we need to check and see if it already exists,
# if no, create a single LV with the right options
# if yes, manage both the named LV, and the underlying VPool LV

- name: Check if the VDO devices exist
  ansible.builtin.stat:
    path: "/dev/{{ item.vg_name }}/{{ item.lv_name }}"
  loop: "{{ vdo_configs }}"
  register: vdo_devices

# If there is more than one VPool, it's not immediately clear which VPool belongs to which
# LV. "lvdisplay" can tell us
- name: Check which LV belongs to which Pool
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      lvs --noheadings --unbuffered -o pool_lv /dev/{{ item.vg_name }}/{{ item.lv_name }} | tr -d '[:space:]'
    executable: /bin/bash
  loop: "{{ vdo_configs }}"
  loop_control:
    index_var: idx
  changed_when: false
  when: vdo_devices.results[idx].stat.exists
  register: vdo_pools

# We run this if the LV does not exist, it creates both devices
- name: Setup VDO pools & LVs
  community.general.lvol:
    vg: "{{ item.vg_name }}"
    lv: "{{ item.lv_name }}"
    size: "{{ item.phys_size }}"
    opts: "--type vdo --vdosettings 'vdo_slab_size_mb={{ item.slab_size }}' --virtualsize {{ item.virt_size }}"
  loop: "{{ vdo_configs }}"
  loop_control:
    index_var: idx
  when: not vdo_devices.results[idx].stat.exists

# Otherwise we manage them separately, using the output of vdo_pools to map them together
- name: Manage VDO storage Vpools
  community.general.lvol:
    vg: "{{ item.vg_name }}"
    lv: "{{ vdo_pools.results[idx].stdout }}"
    size: "{{ item.phys_size }}"
    resizefs: true
  loop: "{{ vdo_configs }}"
  loop_control:
    index_var: idx
  when: vdo_devices.results[idx].stat.exists and vdo_pools.results[idx].stdout | length > 0

- name: Manage VDO thin LVs
  community.general.lvol:
    vg: "{{ item.vg_name }}"
    lv: "{{ item.lv_name }}"
    size: "{{ item.virt_size }}"
    resizefs: true
  loop: "{{ vdo_configs }}"
  loop_control:
    index_var: idx
  when: vdo_devices.results[idx].stat.exists and vdo_pools.results[idx].stdout | length > 0

# Either way, after creation / updates we can manage the filesystems and mountpoints
- name: Create vdo mount points
  ansible.builtin.file:
    path: "{{ item.mount_point }}"
    state: directory
    mode: '0755'
  loop: "{{ vdo_configs }}"

- name: Format the filesystems
  community.general.filesystem:
    fstype: "{{ item.fs_type }}"
    opts: "{{ item.fs_opts }}"
    dev: "/dev/{{ item.vg_name }}/{{ item.lv_name }}"
  loop: "{{ vdo_configs }}"

- name: Mount the LVs
  ansible.posix.mount:
    path: "{{ item.mount_point }}"
    src: "/dev/{{ item.vg_name }}/{{ item.lv_name }}"
    fstype: "{{ item.fs_type }}"
    state: mounted
  loop: "{{ vdo_configs }}"

- include_tasks: monitoring.yml
